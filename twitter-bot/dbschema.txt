-- Supabase Database Schema for Twitter Bot

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "vector";

-- Personality Configuration
CREATE TABLE personality_config (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255),
    bio TEXT,
    interests TEXT[],
    writing_style VARCHAR(100),
    tone VARCHAR(50),
    topics TEXT[],
    avoid_topics TEXT[],
    quirks TEXT[],
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Training Tweets (your historical tweets for training)
CREATE TABLE training_tweets (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    twitter_id VARCHAR(100) UNIQUE,
    text TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE,
    author_id VARCHAR(100),
    conversation_id VARCHAR(100),
    metrics JSONB,
    is_approved BOOLEAN DEFAULT true,
    imported_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Posted Tweets
CREATE TABLE tweets (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    twitter_id VARCHAR(100) UNIQUE,
    content TEXT NOT NULL,
    posted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metrics JSONB,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Scheduled Posts Queue
CREATE TABLE scheduled_posts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    content TEXT NOT NULL,
    scheduled_time TIMESTAMP WITH TIME ZONE NOT NULL,
    status VARCHAR(50) DEFAULT 'pending', -- pending, posted, failed, cancelled
    twitter_id VARCHAR(100),
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Test Queue for Review
CREATE TABLE test_queue (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    content TEXT NOT NULL,
    metadata JSONB,
    status VARCHAR(50) DEFAULT 'pending', -- pending, approved, rejected, edited
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Conversation Tracking
CREATE TABLE conversations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    conversation_id VARCHAR(100) NOT NULL,
    tweet_id VARCHAR(100) NOT NULL,
    in_reply_to VARCHAR(100),
    content TEXT,
    author_id VARCHAR(100),
    author_username VARCHAR(100),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    INDEX idx_conversation_id (conversation_id),
    INDEX idx_tweet_id (tweet_id)
);

-- Interaction Log
CREATE TABLE interaction_log (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    type VARCHAR(50) NOT NULL, -- tweet_posted, reply_posted, mention_skipped, liked, retweeted
    twitter_id VARCHAR(100),
    in_reply_to VARCHAR(100),
    content TEXT,
    author VARCHAR(100),
    reason TEXT,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    INDEX idx_type (type),
    INDEX idx_created_at (created_at)
);

-- Response Templates (common response patterns)
CREATE TABLE response_templates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    trigger_pattern TEXT,
    response_template TEXT,
    category VARCHAR(50),
    usage_count INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Analytics Summary
CREATE TABLE analytics_summary (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    date DATE NOT NULL UNIQUE,
    tweets_posted INTEGER DEFAULT 0,
    replies_posted INTEGER DEFAULT 0,
    mentions_received INTEGER DEFAULT 0,
    mentions_replied INTEGER DEFAULT 0,
    total_likes INTEGER DEFAULT 0,
    total_retweets INTEGER DEFAULT 0,
    avg_engagement_rate DECIMAL(5,2),
    top_topics JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX idx_scheduled_posts_status ON scheduled_posts(status);
CREATE INDEX idx_scheduled_posts_time ON scheduled_posts(scheduled_time);
CREATE INDEX idx_test_queue_status ON test_queue(status);
CREATE INDEX idx_tweets_posted_at ON tweets(posted_at);
CREATE INDEX idx_training_tweets_approved ON training_tweets(is_approved);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply updated_at triggers
CREATE TRIGGER update_personality_config_updated_at BEFORE UPDATE ON personality_config
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_scheduled_posts_updated_at BEFORE UPDATE ON scheduled_posts
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_test_queue_updated_at BEFORE UPDATE ON test_queue
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_response_templates_updated_at BEFORE UPDATE ON response_templates
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_analytics_summary_updated_at BEFORE UPDATE ON analytics_summary
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Row Level Security (RLS) Policies
ALTER TABLE personality_config ENABLE ROW LEVEL SECURITY;
ALTER TABLE training_tweets ENABLE ROW LEVEL SECURITY;
ALTER TABLE tweets ENABLE ROW LEVEL SECURITY;
ALTER TABLE scheduled_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE test_queue ENABLE ROW LEVEL SECURITY;
ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;
ALTER TABLE interaction_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE response_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE analytics_summary ENABLE ROW LEVEL SECURITY;

-- Create service role policies (adjust based on your auth setup)
-- These are examples - modify based on your specific auth requirements

-- Service role can do everything
CREATE POLICY "Service role can manage all personality_config" ON personality_config
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage all training_tweets" ON training_tweets
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage all tweets" ON tweets
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage all scheduled_posts" ON scheduled_posts
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage all test_queue" ON test_queue
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage all conversations" ON conversations
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage all interaction_log" ON interaction_log
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage all response_templates" ON response_templates
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage all analytics_summary" ON analytics_summary
    FOR ALL USING (auth.role() = 'service_role');

-- Insert default personality config
INSERT INTO personality_config (
    name,
    bio,
    interests,
    writing_style,
    tone,
    topics,
    avoid_topics,
    quirks
) VALUES (
    'AI Assistant',
    'Your friendly AI-powered Twitter bot',
    ARRAY['technology', 'innovation', 'startups', 'AI', 'coding'],
    'conversational',
    'friendly',
    ARRAY['tech', 'AI', 'startups', 'coding', 'innovation'],
    ARRAY['politics', 'religion', 'controversial topics'],
    ARRAY['uses emojis occasionally', 'asks thoughtful questions', 'shares interesting facts']
) ON CONFLICT DO NOTHING;